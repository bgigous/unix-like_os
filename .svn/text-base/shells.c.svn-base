#include "shells.h"

#define INTR_STACK_SIZE 20

void terminal_switch(int pid, int status)
{
//	if ( pid == 3 ) switch_to_process(CURR_TASK, 0);

	if ( pid > 2 )
	{
		printf( "uh oh, term_switch pid > 2\n");
	}

	if(pid == CURR_TASK->pid)
		return;
	
	id = pid;
	update_pcb();
	//save video memory
	save_vid_memory(CURR_TASK->pid);
	reset_cursor(0);
	//flush TLB and switch to the task
	//memcpy((uint32_t *)0xB40000, CURR_TASK, sizeof(pcb_t));
	cr3_switch( &pdir[pid] );
	pcb_t *switch_to = (pcb_t *)(KERNEL_END - ( (pid+1) * (PAGE_SIZE_4KB*2)));
	// a while loop for nested shells
	while (switch_to->child != NULL)
	{
		switch_to = switch_to->child;
		pid = switch_to->pid;
		cr3_switch( &pdir[pid] );
	}
	//load old vid memory
	reload_vid_memory(pid);
	//switch to the correct process
	CURR_TASK = switch_to;
	//if(status == 1)
	//	send_eoi(KEYBOARD_IRQ);
	switch_to_process(switch_to, 0);
}

void update_pcb()
{
	uint32_t * intr_stack_start = (uint32_t*)((uint8_t*)CURR_TASK + 2*PAGE_SIZE_4KB - INTR_STACK_SIZE);
	CURR_TASK->EIP = intr_stack_start[0];
	CURR_TASK->CS = intr_stack_start[1];
	CURR_TASK->EFLAGS = intr_stack_start[2];
	CURR_TASK->ESP = intr_stack_start[3] - 3;
	CURR_TASK->SS = intr_stack_start[4];
}

void save_vid_memory(int pid)
{
	//save current video memory into corresponding page from 10-12MB
	uint8_t *src = (uint8_t *)VIDEO_MEM;
	// below might be screwy with the &
	//uint8_t *dest = 0xA00000;
	uint32_t size = PAGE_SIZE_4KB;
	memcpy((uint8_t *)(0xA00000+(pid*0x50000)), src, size);	
	//memcpy((uint8_t *)(0xA00000), src, size);	
}

void reload_vid_memory(int pid)
{
	//load the video buffer memory from the corresponding page in 10-12MB back
	uint8_t *dest = (uint8_t *)VIDEO_MEM;
	memcpy(dest, (uint8_t *)(0xA00000+(pid*0x50000)), PAGE_SIZE_4KB);	
	//memcpy( dest,(uint8_t *)(0xA00000), PAGE_SIZE_4KB);	
}
